def replace_none_with_parent_values(my_list):
    # Create a lookup dictionary where the key is the 'id' and the value is a list of dictionaries with that 'id'
    id_dict = {}
    for d in my_list:
        if d['id'] not in id_dict:
            id_dict[d['id']] = []
        id_dict[d['id']].append(d)

    # Loop through each dictionary in the list
    for d in my_list:
        # Check if the dictionary has a non-None ParentID, i.e., it's a child dictionary
        if d['ParentID'] is not None:
            # Get the list of parent dictionaries corresponding to the ParentID
            parent_dicts = id_dict.get(d['ParentID'], [])
            for parent_dict in parent_dicts:
                # Replace actual None values in the child dictionary with exact key matches from the parent dictionary
                for key, value in d.items():
                    if value is None and key in parent_dict:
                        d[key] = parent_dict[key]

    return my_list

# Example usage
my_list = [
    {
        "id": 1,
        "ParentID": None,
        "request[0].zoneIdentification": "PD3",
        "request[0].description": "PDC API test zone",
        "request[0].countryCode": "US"
    },
    {
        "id": 1,
        "ParentID": None,
        "request[1].zoneIdentification": "PD3",
        "request[1].description": "PDC API test zone",
        "request[1].countryCode": "US"
    },
    {
        "id": 2,
        "ParentID": 1,
        "request[1].zoneIdentification": None,
        "request[1].description": None,
        "request[1].countryCode": "IN"
    }
]

updated_list = replace_none_with_parent_values(my_list)
print(updated_list)

----------------------------------------------------
def merge_dicts(parent, child):
    """Merge missing keys from parent to child, excluding 'ParentID'."""
    for key in parent:
        if key not in child and key != 'ParentID':
            child[key] = parent[key]

def build_parent_child_mapping(data):
    """Build mapping of parent ID to its child dictionaries."""
    parent_to_children = {}
    all_dicts = {item['id']: item for item in data}

    for item in data:
        parent_id = item.get('ParentID')
        if parent_id is not None and parent_id in all_dicts:
            if parent_id not in parent_to_children:
                parent_to_children[parent_id] = []
            parent_to_children[parent_id].append(item['id'])

    return parent_to_children, all_dicts

def merge_hierarchy(data):
    """Merge parent dictionaries into their child dictionaries recursively."""
    parent_to_children, all_dicts = build_parent_child_mapping(data)

    def merge_all_ancestors(current_id):
        """Recursively merge all ancestors into the current dictionary."""
        item = all_dicts[current_id]
        parent_id = item.get('ParentID')

        if parent_id and parent_id in all_dicts:
            merge_all_ancestors(parent_id)
            merge_dicts(all_dicts[parent_id], item)

    # Start by merging all ancestors for each dictionary
    for item_id in all_dicts:
        merge_all_ancestors(item_id)

    return list(all_dicts.values())

# Example usage
my_list = [
    {
        "id": 1,
        "ParentID": None,
        "request[0].zoneIdentification": "PD3",
        "request[0].description": "PDC API test zone"
    },
    {
        "id": 21,
        "ParentID": 1,
        "request[1].zoneIdentification": "PD3",
        "request[1].description": "PDC API test zone"
    },
    {
        "id": 8,
        "ParentID": 21,
        "request[2].zoneIdentification": "PD4",
        "request[2].description": "ABC API test zone",
        "request[2].countryCode": "SA"
    }
]

merged_list = merge_hierarchy(my_list)
print(merged_list)

