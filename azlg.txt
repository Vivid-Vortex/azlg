def replace_none_with_parent_values(my_list):
    # Create a lookup dictionary where the key is the 'id' and the value is a list of dictionaries with that 'id'
    id_dict = {}
    for d in my_list:
        if d['id'] not in id_dict:
            id_dict[d['id']] = []
        id_dict[d['id']].append(d)

    # Loop through each dictionary in the list
    for d in my_list:
        # Check if the dictionary has a non-None ParentID, i.e., it's a child dictionary
        if d['ParentID'] is not None:
            # Get the list of parent dictionaries corresponding to the ParentID
            parent_dicts = id_dict.get(d['ParentID'], [])
            for parent_dict in parent_dicts:
                # Replace actual None values in the child dictionary with exact key matches from the parent dictionary
                for key, value in d.items():
                    if value is None and key in parent_dict:
                        d[key] = parent_dict[key]

    return my_list

# Example usage
my_list = [
    {
        "id": 1,
        "ParentID": None,
        "request[0].zoneIdentification": "PD3",
        "request[0].description": "PDC API test zone",
        "request[0].countryCode": "US"
    },
    {
        "id": 1,
        "ParentID": None,
        "request[1].zoneIdentification": "PD3",
        "request[1].description": "PDC API test zone",
        "request[1].countryCode": "US"
    },
    {
        "id": 2,
        "ParentID": 1,
        "request[1].zoneIdentification": None,
        "request[1].description": None,
        "request[1].countryCode": "IN"
    }
]

updated_list = replace_none_with_parent_values(my_list)
print(updated_list)

----------------------------------------------------
def merge_dicts(parent, child):
    """Merge missing keys from parent to child, excluding 'ParentID'."""
    for key in parent:
        if key not in child and key != 'ParentID':
            child[key] = parent[key]


def merge_parent_child_dicts(data):
    """Merge missing items from parent dictionaries into their child dictionaries."""
    parent_dicts = {}
    child_dicts = {}

    # Separate parent and child dictionaries
    for item in data:
        if 'ParentID' in item and item['ParentID'] is not None:
            parent_id = item['ParentID']
            if parent_id not in child_dicts:
                child_dicts[parent_id] = []
            child_dicts[parent_id].append(item)
        else:
            parent_dicts[item['id']] = item

    # Merge missing items from parent to child
    for parent_id, parent_dict in parent_dicts.items():
        if parent_id in child_dicts:
            for child_dict in child_dicts[parent_id]:
                merge_dicts(parent_dict, child_dict)

    # Combine the updated dictionaries into a single list
    merged_list = list(parent_dicts.values())
    for child_list in child_dicts.values():
        merged_list.extend(child_list)

    return merged_list


# Example usage
my_list = [
    {
        "id": 1,
        "ParentID": None,
        "request[0].zoneIdentification": "PD3",
        "request[0].description": "PDC API test zone",
        "request[0].countryCode": "US",
        "request[1].zoneIdentification": "PD3",
        "request[1].description": "PDC API test zone",
        "request[1].countryCode": "US"
    },
    {
        "id": 2,
        "ParentID": 1,
        "request[1].zoneIdentification": "PD3",
        "request[1].description": "PDC API test zone",
        "request[1].countryCode": "IN"
    }
]

merged_list = merge_parent_child_dicts(my_list)
print(merged_list)

