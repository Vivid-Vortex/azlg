import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;
import static org.assertj.core.api.Assertions.assertThat;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;

import java.util.Collections;
import java.util.List;
import java.util.Optional;

public class ProductSchemaControllerTest {

    @Mock
    private ProductSchemaService productSchemaService;

    @InjectMocks
    private ProductSchemaController productSchemaController;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testSaveRealmDatasources() {
        String schemaId = "testSchemaId";
        RealmDatasourceModel realmDatasource = new RealmDatasourceModel();
        realmDatasource.setFieldName("testField");

        RealmDatasourcesModel requestDto = new RealmDatasourcesModel();
        requestDto.setRealmDatasources(Collections.singletonList(realmDatasource));

        RealmDatasourcesModel responseDto = new RealmDatasourcesModel();
        responseDto.setRealmDatasources(Collections.singletonList(realmDatasource));

        when(productSchemaService.saveRealmDatasources(anyString(), any(List.class))).thenReturn(responseDto);

        ResponseEntity<RealmDatasourcesModel> response = productSchemaController.saveRealmDatasources(schemaId, requestDto);

        assertThat(response.getStatusCodeValue()).isEqualTo(200);
        assertThat(response.getBody()).isNotNull();
        assertThat(response.getBody().getRealmDatasources()).isNotEmpty();
        assertThat(response.getBody().getRealmDatasources().get(0).getFieldName()).isEqualTo("testField");
    }

    @Test
    public void testGetRealmDatasources() {
        String schemaId = "testSchemaId";
        RealmDatasourceModel realmDatasource = new RealmDatasourceModel();
        realmDatasource.setFieldName("testField");

        RealmDatasourcesModel responseDto = new RealmDatasourcesModel();
        responseDto.setRealmDatasources(Collections.singletonList(realmDatasource));

        when(productSchemaService.getRealmDatasources(anyString())).thenReturn(responseDto);

        ResponseEntity<RealmDatasourcesModel> response = productSchemaController.getRealmDatasources(schemaId);

        assertThat(response.getStatusCodeValue()).isEqualTo(200);
        assertThat(response.getBody()).isNotNull();
        assertThat(response.getBody().getRealmDatasources()).isNotEmpty();
        assertThat(response.getBody().getRealmDatasources().get(0).getFieldName()).isEqualTo("testField");
    }

    @Test
    public void testDeleteRealmDatasource() {
        String schemaId = "testSchemaId";
        String realmId = "testRealmId";

        // You can add additional mocking here if needed
        ResponseEntity<Void> response = productSchemaController.deleteRealmDatasource(schemaId, realmId);

        assertThat(response.getStatusCodeValue()).isEqualTo(204);
    }
}
