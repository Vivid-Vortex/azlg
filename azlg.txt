def replace_none_values(data_list):
    # Collect the known values for each key
    known_values = {}

    # First pass: Gather all non-None values
    for item in data_list:
        for key, value in item.items():
            if value is not None:
                known_values[key] = value

    # Second pass: Replace None values with known values
    for item in data_list:
        for key, value in item.items():
            if value is None and key in known_values:
                item[key] = known_values[key]

    return data_list

# Example usage
data = [
    {'id': 1, 'Name': None, 'contact': 'Delhi'},
    {'id': None, 'Name': 'Deepak', 'contact': 'Bombay'},
    {'id': 2, 'Name': 'Deepak', 'contact': None}
]

result = replace_none_values(data)
print(result)
---------------------------------------
def combine_dictionaries_with_key_check(data_list):
    combined_dict = {}
    seen_keys = {}

    for item in data_list:
        # Extract and remove the 'id' key
        item_id = item.pop('id', None)

        for key, value in item.items():
            # Check for duplicate keys
            if key in seen_keys:
                raise ValueError(f"Duplicate key found: '{key}' in ID {item_id} and previously in ID {seen_keys[key]}")

            # Track the key with its associated ID
            seen_keys[key] = item_id

            # Add to the combined dictionary
            combined_dict[key] = value

    return combined_dict


# Example usage
data = [
    {'id': 1, 'request[0].Name': 'Deepak', 'request[1].contact': 'Delhi'},
    {'id': 2, 'request[0].Name': 'Kumar', 'request[0].contact': 'Bombay'},
    {'id': 2, 'request[1].Name': 'Deepak', 'request[2].contact': 'Kolkata'}
]

try:
    result = combine_dictionaries_with_key_check(data)
    print(result)
except ValueError as e:
    print(e)

