import re


def filter_dict_by_patterns(my_list, patterns):
    compiled_patterns = []

    # Compile all the patterns into regex patterns
    for pattern in patterns:
        escaped_pattern = re.escape(pattern).replace(r'\[', r'\[').replace(r'\]', r'\]')
        pattern_regex = re.compile(escaped_pattern.replace(r'\[i\]', r'\[\d+\]').replace(r'\[j\]', r'\[\d+\]'))
        compiled_patterns.append(pattern_regex)

    for dictionary in my_list:
        # Always keep 'id' and 'ParentID'
        keys_to_keep = ['id', 'ParentID']

        # Check if any key matches any of the patterns
        for key in dictionary:
            if any(compiled_pattern.match(key) for compiled_pattern in compiled_patterns):
                keys_to_keep.append(key)

        # Remove keys that do not match any pattern and are not 'id' or 'ParentID'
        keys_to_remove = [key for key in dictionary if key not in keys_to_keep]

        for key in keys_to_remove:
            del dictionary[key]
    return my_list


def transform_list(my_list):
    transformed_list = []

    for item in my_list:
        id_value = item['id']
        parent_id_value = item['ParentID']

        for key, value in item.items():
            if key not in ['id', 'ParentID']:
                transformed_dict = {
                    'id': id_value,
                    'ParentID': parent_id_value,
                    key: value
                }
                transformed_list.append(transformed_dict)

    return transformed_list


# Example usage
my_list = [{
    'id': 1,
    'ParentID': None,
    'request[0].name': 'Deepak',
    'request[1].name': 'Kumar',
    'request[2].name': 'Aman',
    'request[0].phone[0].[0].mobile': '97388484848',
    'request[0].contact[0]': 'mobile',
    'request[0].pan[0]': 'mobile'
},
    {
        'id': 2,
        'ParentID': 1,
        'request[0].name': 'Rajesh',
        'request[1].name': 'Khanna',
        'request[0].phone[0].[1].mobile': '97388484859',
        'request[0].phone[1].[1].mobile': '973884847859',
        'request[1].contact[1]': 'mobile'
    }]

# Filter the list by multiple patterns
my_list1 = filter_dict_by_patterns(my_list, ['request[i].name', 'request[i].contact[j]', 'request[i].pan[j]'])
# my_list = transform_list(my_list)

# Print the filtered list
print(my_list1)

-----------------------------------------------------------------------------------------------------------------------------------
def segregat_dictinoary_list(my_list):
    transformed_list = []

    for item in my_list:
        id_value = item['id']
        parent_id_value = item['ParentID']

        # Iterate over all key-value pairs in the dictionary except 'id' and 'ParentID'
        for key, value in item.items():
            if key not in ['id', 'ParentID']:
                # Create a new dictionary with 'id', 'ParentID', and the current key-value pair
                transformed_dict = {
                    'id': id_value,
                    'ParentID': parent_id_value,
                    key: value
                }
                # Add the transformed dictionary to the result list
                transformed_list.append(transformed_dict)

    return transformed_list


# Example input
# my_list = [
#     {
#         'id': 1,
#         'ParentID': None,
#         'request[0].name': 'Deepak',
#         'request[1].name': 'Kumar',
#         'request[2].name': 'Aman',
#         'request[0].phone[0].[0].mobile': '97388484848',
#         'request[0].contact[0]': 'mobile',
#         'request[0].pan[0]': 'mobile'
#     },
#     {
#         'id': 2,
#         'ParentID': 1,
#         'request[0].name': 'Rajesh',
#         'request[1].name': 'Khanna',
#         'request[0].phone[0].[1].mobile': '97388484859',
#         'request[0].phone[1].[1].mobile': '973884847859',
#         'request[1].contact[1]': 'mobile'
#     }
# ]

my_list = [{'id': 1, 'ParentID': None, 'request[0].name': 'Deepak', 'request[1].name': 'Kumar', 'request[2].name': 'Aman', 'request[0].contact[0]': 'mobile', 'request[0].pan[0]': 'mobile'}, {'id': 2, 'ParentID': 1, 'request[0].name': 'Rajesh', 'request[1].name': 'Khanna', 'request[1].contact[1]': 'mobile'}]

# Transform the input list
my_list_expected = segregat_dictinoary_list(my_list)
print(my_list_expected)
-----------------------------------------------------------------------------------------------------------------------------------
def select_non_id_key(dictionary):
    # Filter out 'id' and 'ParentID' from the keys
    non_id_keys = [key for key in dictionary.keys() if key not in ['id', 'ParentID']]

    # Check if there are any non-id keys
    if non_id_keys:
        # Return the first key or you can select any other key based on your criteria
        return non_id_keys[0]
    else:
        return None


# Example dictionary
# example_dict = {
#     "id": 1,
#     "ParentID": None,
#     "request[0].name": "Deepak"
# }

example_dict = {'id': 2, 'ParentID': 1, 'request[1].contact[1]': 'mobile'}

# Select a key that is not 'id' or 'ParentID'
selected_key = select_non_id_key(example_dict)
print(selected_key)  # Output: 'request[0].name'

