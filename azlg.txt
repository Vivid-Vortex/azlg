import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

@WebMvcTest(ProductController.class)
public class ProductControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private ProductSchemaService productSchemaService;

    @MockBean
    private ProductSchemaMappingRepository productSchemaMappingRepository;

    @MockBean
    private CustomerDatasourceDetailsRepository customerDatasourceDetailsRepository;

    @MockBean
    private ProductSchemaMappingMapper productSchemaMappingMapper;

    @MockBean
    private CustomerDatasourceDetailsMapper customerDatasourceDetailsMapper;

    @BeforeEach
    public void setUp() {
        // Set up mock behavior here if necessary
        when(productSchemaMappingRepository.existsBySchemaId(anyString())).thenReturn(true);
        when(customerDatasourceDetailsRepository.findBySchemaIdAndRealmId(anyString(), anyString()))
                .thenReturn(Collections.emptyList());
        when(customerDatasourceDetailsRepository.save(any(CustomerDatasourceDetails.class)))
                .thenReturn(new CustomerDatasourceDetails());
        when(customerDatasourceDetailsMapper.toEntity(any(RealmDatasourceModel.class)))
                .thenReturn(new CustomerDatasourceDetails());
        when(customerDatasourceDetailsMapper.toDTO(any(CustomerDatasourceDetails.class)))
                .thenReturn(new RealmDatasourceModel());
    }

    @Test
    public void testSaveRealmDatasources() throws Exception {
        String schemaId = "testSchemaId";
        String requestJson = "{\"realmDatasources\":[{\"id\":\"testRealmId\", \"fieldName\":\"testField\"}]}";

        mockMvc.perform(post("/productSchemas/{schemaId}/realmDatasources", schemaId)
                .contentType(MediaType.APPLICATION_JSON)
                .content(requestJson))
                .andExpect(status().isOk());
    }
}
