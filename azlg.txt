import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.json.JacksonTester;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.util.Collections;
import java.util.List;

@ExtendWith(MockitoExtension.class)
public class ProductSchemaControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @InjectMocks
    private ProductSchemaController productSchemaController;

    @Mock
    private ProductSchemaService productSchemaService;

    private JacksonTester<RealmDatasourcesModel> jsonTester;

    @BeforeEach
    public void setup() {
        JacksonTester.initFields(this, new ObjectMapper());
        mockMvc = MockMvcBuilders.standaloneSetup(productSchemaController).build();
    }

    @Test
    public void testSaveRealmDatasources_ShouldReturnOk() throws Exception {
        // Given
        String schemaId = "testSchemaId";
        RealmDatasourceModel realmDatasource = new RealmDatasourceModel();
        realmDatasource.setId("testRealmId");
        realmDatasource.setFieldName("testField");

        RealmDatasourcesModel requestDto = new RealmDatasourcesModel();
        requestDto.setRealmDatasources(List.of(realmDatasource));

        RealmDatasourcesModel responseDto = new RealmDatasourcesModel();
        responseDto.setRealmDatasources(List.of(realmDatasource));

        when(productSchemaService.saveRealmDatasources(anyString(), any())).thenReturn(responseDto);

        // When / Then
        mockMvc.perform(post("/productSchemas/{schemaId}/realmDatasources", schemaId)
                .contentType(MediaType.APPLICATION_JSON)
                .content(jsonTester.write(requestDto).getJson()))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.realmDatasources[0].fieldName").value("testField"));
    }

    @Test
    public void testGetRealmDatasources_ShouldReturnOk() throws Exception {
        // Given
        String schemaId = "testSchemaId";
        RealmDatasourceModel realmDatasource = new RealmDatasourceModel();
        realmDatasource.setFieldName("testField");

        RealmDatasourcesModel responseDto = new RealmDatasourcesModel();
        responseDto.setRealmDatasources(List.of(realmDatasource));

        when(productSchemaService.getRealmDatasources(anyString())).thenReturn(responseDto);

        // When / Then
        mockMvc.perform(get("/productSchemas/{schemaId}/realmDatasources", schemaId)
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.realmDatasources[0].fieldName").value("testField"));
    }

    @Test
    public void testDeleteRealmDatasource_ShouldReturnNoContent() throws Exception {
        // Given
        String schemaId = "testSchemaId";
        String realmId = "testRealmId";

        // When / Then
        mockMvc.perform(delete("/productSchemas/{schemaId}/realmDatasources/{realmId}", schemaId, realmId)
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isNoContent());
    }
}
