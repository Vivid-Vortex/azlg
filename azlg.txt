def replace_none_with_parent_values(my_list):
    # Create a lookup dictionary for quick access to dictionaries by their 'id' and 'ParentID'
    id_dict = {}
    for d in my_list:
        if d['id'] not in id_dict:
            id_dict[d['id']] = d

    # Loop through each dictionary in the list
    for d in my_list:
        # Check if the dictionary has a non-None ParentID, i.e., it's a child dictionary
        if d['ParentID'] is not None:
            parent_dict = id_dict.get(d['ParentID'])
            if parent_dict:
                # Replace actual None values in the child dictionary with values from the parent dictionary
                for key, value in d.items():
                    if value is None and key in parent_dict:
                        d[key] = parent_dict[key]

    return my_list

# Example usage
my_list = [
    {
        'id': 1,
        'ParentID': None,
        'name': 'Deepak',
        'phone': 'mobile'
    },
    {
        'id': 1,
        'ParentID': None,
        'name2': 'None',
        'phone2': 'mobile'
    },
    {
        'id': 2,
        'ParentID': 1,
        'name': None,  # This should be replaced with 'Deepak' from parent dictionary
        'phone': 'mobile'
    }
]

updated_list = replace_none_with_parent_values(my_list)
print(updated_list)
